package com.influencehealth.baldur.identity_load.meta.experian

import com.influencehealth.baldur.identity_load.meta._
import com.influencehealth.baldur.support._
import org.joda.time.DateTime

/**
 * Experian schema
 */
object ExperianSchema extends FileInputMeta with Serializable {
  override def originalFields(): Seq[Product] = wrapRefArray(Array(
    ("addressId", "string"),
    ("lastName", "title"),
    ("personType", "string"),
    ("maritalStatus", "string"),
    ("updatedAt", "date", "yyyyMMdd"),
    ("messageType", "string"),
    ("sex", "string"),
    ("countyOld", "string"),
    ("prefix", "string"),
    ("donatesToCharity", "string"),
    ("adultsInLivingUnit", "int"),
    ("phoneNumbers", "string"),
    ("presenceOfChild", "string"),
    ("zip5Old", "string"),
    ("occupation", "string"),
    ("addressQualityIndicator", "string"),
    ("firstName", "title"),
    ("combinedOwner", "string"),
    ("wealthRating", "int"),
    ("ethnicInsight", "string"),
    ("source", "string"),
    ("householdId", "string"),
    ("estimatedHomeValue", "float"),
    ("lonOld", "float"),
    ("childrenInLivingUnit", "int"),
    ("childZeroToThreeBkt", "string"),
    ("religion", "string"),
    ("stateOld", "string"),
    ("personalSuffix", "string"),
    ("validAddressFlagOld", "boolean"),
    ("sourcePersonId", "string"),
    ("mailResponder", "string"),
    ("zip4Old", "string"),
    ("childSixteenToEighteenBkt", "string"),
    ("dpbcOld", "string"),
    ("race", "string"),
    ("sourceType", "string"),
    ("recipientReliabilityCode", "int"),
    ("cityOld", "string"),
    ("address1Old", "string"),
    ("address2Old", "string"),
    ("occupationGroup", "string"),
    ("trackingDate", "date","yyyyMMdd"),
    ("lengthOfResidence", "int"),
    ("latOld", "float"),
    ("middleName", "title"),
    ("mosaicZip4", "string"),
    ("education", "int"),
    ("carrierRouteOld", "string"),
    ("homeLandValue", "float"),
    ("addressType", "string"),
    ("language", "string"),
    ("childSevenToNineBkt", "string"),
    ("personsInLivingUnit", "int"),
    ("dob", "date","yyyyMMdd"),
    ("age", "int"),
    ("childTenToTwelveBkt", "string"),
    ("payerType", "string"),
    ("childThirteenToFifteenBkt", "string"),
    ("customerId", "int"),
    ("hhComp", "string"),
    ("householdIncome", "string"),
    ("mosaicGlobalZip4", "string"),
    ("dwellType", "string"),
    ("homeYearBuilt", "int"),
    ("childFourToSixBkt", "string"),
    ("address1", "string"),
    ("address2", "string"),
    ("city", "string"),
    ("state", "string"),
    ("zip5", "string"),
    ("zip10", "string"),
    ("zip4", "string"),
    ("streetPreDir", "string"),
    ("streetName", "string"),
    ("streetPostDir", "string"),
    ("streetSuffix", "string"),
    ("streetSecondNumber", "string"),
    ("streetSecondUnit", "string"),
    ("lat", "string"),
    ("lon", "string"),
    ("msa", "string"),
    ("pmsa", "string"),
    ("dpbc", "string"),
    ("dpv", "string"),
    ("countyCode", "string"),
    ("county", "string"),
    ("carrierRoute", "string"),
    ("censusBlock", "string"),
    ("censusTract", "string"),
    ("eLot", "string"),
    ("streetHouseNum", "string"),
    ("ncoaActionCode", "string"),
    ("ncoaAnkCode", "string"),
    ("ncoaMoveType", "string"),
    ("ncoaMoveDate", "string","yyyyMMdd"),
    ("lacsFootnote", "string"),
    ("barcode", "string"),
    ("lacs", "string"),
    ("cassStandardizeIndicator", "string"),
    ("dpvFootnote", "string")
  ))

  override def mapping(input: Map[String, Any]): ActivityOutput = {

    val validAddressFlag = FileInputSupport.getValidAddressFlag(FileInputSupport.getStringOptValue(input, "ncoaActionCode"))
    val lat = getAnchorLatLon(FileInputSupport.getAddressStringValue(input, "lat", validAddressFlag))
    val lon = getAnchorLatLon(FileInputSupport.getAddressStringValue(input, "lon", validAddressFlag))

    val (dob, age, ageGroup): (Option[DateTime], Option[Int], Option[String]) = FileInputSupport.getAgeDob(input, "age", "dob")
    val phoneNumbers: Option[List[String]] = ExperianSupport.getPhoneNumbers(input)
    val childAgeBuckets: Option[Set[String]] = ExperianSupport.getChildAgeBuckets(input)
    val beehiveCluster: Option[Int] = ExperianSupport.getBeehiveCluster(input)

    val (financialClassID, financialClass, payerType) = ExperianSupport.getFinancialClass(beehiveCluster)

    ActivityOutput(
      personId = None,
      customerId = FileInputSupport.getIntValue(input, "customerId"),
      addressId = None,
      householdId = None,
      messageType = FileInputSupport.getStringValue(input, "messageType"),
      source = FileInputSupport.getStringValue(input, "source"),
      sourceType = FileInputSupport.getStringValue(input, "sourceType"),
      personType = FileInputSupport.getStringValue(input, "personType"),
      sourcePersonId = FileInputSupport.getStringValue(input, "sourcePersonId"),
      sourceRecordId = FileInputSupport.getStringValue(input, "sourcePersonId"),
      trackingDate = FileInputSupport.getDateValue(input, "trackingDate"),
      firstName = FileInputSupport.getStringOptValue(input, "firstName"),
      middleName = FileInputSupport.getStringOptValue(input, "middleName"),
      lastName = FileInputSupport.getStringOptValue(input, "lastName"),
      prefix = FileInputSupport.getStringOptValue(input, "prefix"),
      personalSuffix = FileInputSupport.getStringOptValue(input, "personalSuffix"),
      dob = dob,
      age = age,
      ageGroup = ageGroup,
      sex = FileInputSupport.getStringOptValue(input, "sex"),
      payerType = payerType,
      maritalStatus = FileInputSupport.getStringOptValue(input, "maritalStatus"),
      ethnicInsight = FileInputSupport.getStringOptValue(input, "ethnicInsight"),
      race = FileInputSupport.getStringOptValue(input, "race"),
      religion = FileInputSupport.getStringOptValue(input, "religion"),
      language = FileInputSupport.getStringOptValue(input, "language"),
      occupationGroup = FileInputSupport.getStringOptValue(input, "occupationGroup"),
      occupation = FileInputSupport.getStringOptValue(input, "occupation"),
      phoneNumbers = phoneNumbers,
      dwellType = FileInputSupport.getStringOptValue(input, "dwellType"),
      combinedOwner = FileInputSupport.getStringOptValue(input, "combinedOwner"),
      householdIncome = FileInputSupport.getStringOptValue(input, "householdIncome"),
      recipientReliabilityCode = FileInputSupport.getIntOptValue(input, "recipientReliabilityCode"),
      mailResponder = FileInputSupport.getStringOptValue(input, "mailResponder"),
      lengthOfResidence = FileInputSupport.getIntOptValue(input, "lengthOfResidence"),
      personsInLivingUnit = FileInputSupport.getIntOptValue(input, "personsInLivingUnit"),
      adultsInLivingUnit = FileInputSupport.getIntOptValue(input, "adultsInLivingUnit"),
      childrenInLivingUnit = FileInputSupport.getIntOptValue(input, "childrenInLivingUnit"),
      homeYearBuilt = FileInputSupport.getIntOptValue(input, "homeYearBuilt"),
      homeLandValue = FileInputSupport.getFloatOptValue(input, "homeLandValue"),
      estimatedHomeValue = FileInputSupport.getStringOptValue(input, "estimatedHomeValue"),
      donatesToCharity = FileInputSupport.getStringOptValue(input, "donatesToCharity"),
      mosaicZip4 = FileInputSupport.getStringOptValue(input, "mosaicZip4"),
      mosaicGlobalZip4 = FileInputSupport.getStringOptValue(input, "mosaicGlobalZip4"),
      hhComp = FileInputSupport.getStringOptValue(input, "hhComp"),
      presenceOfChild = FileInputSupport.getStringOptValue(input, "presenceOfChild"),
      childZeroToThreeBkt = FileInputSupport.getStringOptValue(input, "childZeroToThreeBkt"),
      childFourToSixBkt = FileInputSupport.getStringOptValue(input, "childFourToSixBkt"),
      childSevenToNineBkt = FileInputSupport.getStringOptValue(input, "childSevenToNineBkt"),
      childTenToTwelveBkt = FileInputSupport.getStringOptValue(input, "childTenToTwelveBkt"),
      childThirteenToFifteenBkt = FileInputSupport.getStringOptValue(input, "childThirteenToFifteenBkt"),
      childSixteenToEighteenBkt = FileInputSupport.getStringOptValue(input, "childSixteenToEighteenBkt"),
      childAgeBuckets = childAgeBuckets,
      wealthRating = FileInputSupport.getIntOptValue(input, "wealthRating"),
      addressQualityIndicator = FileInputSupport.getStringOptValue(input, "addressQualityIndicator"),
      education = FileInputSupport.getIntOptValue(input, "education"),
      addressType = FileInputSupport.getStringOptValue(input, "addressType"),
      validAddressFlag = validAddressFlag,
      address1 = FileInputSupport.getAddressStringValue(input, "address1", validAddressFlag),
      address2 = FileInputSupport.getAddressStringValue(input, "address2", validAddressFlag),
      city = FileInputSupport.getAddressStringValue(input, "city", validAddressFlag),
      state = FileInputSupport.getAddressStringValue(input, "state", validAddressFlag),
      zip5 = FileInputSupport.getAddressStringValue(input, "zip5", validAddressFlag),
      zip4 = FileInputSupport.getAddressStringValue(input, "zip4", validAddressFlag),
      county = FileInputSupport.getAddressStringValue(input, "county", validAddressFlag),
      carrierRoute = FileInputSupport.getAddressStringValue(input, "carrierRoute", validAddressFlag),
      dpbc = FileInputSupport.getAddressStringValue(input, "dpbc", validAddressFlag),
      lat = lat,
      lon = lon,
      streetPreDir = FileInputSupport.getAddressStringValue(input, "streetPreDir", validAddressFlag),
      streetName = FileInputSupport.getAddressStringValue(input, "streetName", validAddressFlag),
      streetPostDir = FileInputSupport.getAddressStringValue(input, "streetPostDir", validAddressFlag),
      streetSuffix = FileInputSupport.getAddressStringValue(input, "streetSuffix", validAddressFlag),
      streetSecondNumber = FileInputSupport.getAddressStringValue(input, "streetSecondNumber", validAddressFlag),
      streetSecondUnit = FileInputSupport.getAddressStringValue(input, "streetSecondUnit", validAddressFlag),
      streetHouseNum = FileInputSupport.getAddressStringValue(input, "streetHouseNum", validAddressFlag),
      msa = FileInputSupport.getAddressStringValue(input, "msa", validAddressFlag),
      pmsa = FileInputSupport.getAddressStringValue(input, "pmsa", validAddressFlag),
      dpv = FileInputSupport.getAddressStringValue(input, "dpv", validAddressFlag),
      countyCode = FileInputSupport.getAddressStringValue(input, "countyCode", validAddressFlag),
      censusBlock = FileInputSupport.getAddressStringValue(input, "censusBlock", validAddressFlag),
      censusTract = FileInputSupport.getAddressStringValue(input, "censusTract", validAddressFlag),
      beehiveCluster = beehiveCluster,
      financialClassId = financialClassID,
      financialClass = financialClass

    )
  }
}
